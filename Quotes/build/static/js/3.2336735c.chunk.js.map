{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/3.2336735c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1qKl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3x84f\",\"loading\":\"NewCommentForm_loading__1EqsW\",\"control\":\"NewCommentForm_control___0OqX\",\"actions\":\"NewCommentForm_actions__2gZb5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2E9Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__lVYdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__34m4V\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error,onAddedComment]);\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: { text: enteredText }, quoteId: props.quoteId});\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"../comments/CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  },[sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments are added yet.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n  if (!loadedQuote.text) {\r\n    return <h1>No quote found</h1>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}